(load "simplesub.lisp")
(load "digraphs.lisp")

(defun exchange (vec i j)
  (rotatef (aref vec i) (aref vec j))
  vec)

(defun scores (key txt idx)
  (format t "~&")
  (do ((i idx (+ i 1))
       (k (copy-seq key) (copy-seq key))
       (val nil)
       (maxval 0.0)
       (maxidx 0))
      ((equal i (length key)) (exchange k idx maxidx))
      (rotatef (aref k idx) (aref k i))
      (setf val (digraphs::correlation (decrypt-list txt k)))
      (cond ((> val maxval) (setf maxval val) (setf maxidx i)))))

(defun run-down (key txt)
  (do ((k 0 (+ k 1))
       (v (copy-seq key) (scores v txt k)))
      ((equal k (length key)) v)))

(defun text-stats (txt)
  (format t "~&monograph index of coincidence: ~,3f" (ioc txt))
  (format t "~&monograph correlation: ~,3f" (correlation txt))
  (format t "~&digraph index of coincidece: ~,3f" (digraphs::ioc txt))
  (format t "~&digraph correlation: ~,3f" (digraphs::correlation txt)))
  
;;; state
(defvar *plaintext*)
(defvar *ciphertext*)
;; (defvar *trial-plaintext*)
(defvar *key*)
(defvar *trial-key*)
(defvar *scored-key*)

(setf *plaintext* (read-file "\\dat\\text\\telegram.txt"))
(setf *key* (scramble *alphabet*))

(setf *ciphertext* (encrypt-list *plaintext* *key*))
(display-ciphertext *ciphertext*)
(text-stats *ciphertext*)

(format t "~&~S" *key*)
(setf *trial-key* (trial-key *ciphertext*))
(format t "~&first trial key after naive frequency substition attack")
(format t "~&~S" *trial-key*)


(format t "~&hill-climbing trial keys")
(scores *trial-key* *ciphertext* 0)
(setf *scored-key* (run-down *trial-key* *ciphertext*))
(format t "~&~S" *scored-key*)
(dotimes (i 5)
  (let ((last-key *scored-key*))
    (setf *scored-key* (run-down *scored-key* *ciphertext*))
    (format t "~&~S" *scored-key*)
    (cond ((equalp *scored-key* last-key) (return T)))))
(display-plaintext (decrypt-list *ciphertext* *scored-key*))
